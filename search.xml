<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>操作系统</title>
      <link href="/2023/03/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/03/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="杂烩"><a href="#杂烩" class="headerlink" title="杂烩"></a>杂烩</h1><ol><li><p>int fork();</p><p>创建进程。正确返回：等于0表示是子进程，大于0表示当前进程是父进程；错误返回：小于0，表示进程创建失败。</p></li><li><p>int getpid();</p><p>取得当前进程的标识符（进程ID）。</p></li><li><p>int getppid();</p><p>取得当前进程的父进程ID。</p></li><li><p>int getpgrp();</p><p>取得当前进程的组标识符。</p></li><li><p>int getpid(int pid);</p><p>将当前进程的组标识符改为当前进程的ID，使其成为进程组中的首进程，并返回这一新的组标识符。</p></li><li><p>pid_t wait()&#x2F;waitpid();</p><p>wait()函数会使父进程暂停执行，直到它的一个子进程结束为止，返回值为子进程的PID；</p><p>waitpid()用于等待某个特定进程的结束。</p><p>在子进程结束前，wait()可以使调用者堵塞，而waitpid()可以通过选项使调用者不堵塞，wait()是waitpid()的一个特例。</p></li><li><p>exit(int status);</p><p>释放程序所占的资源并通知父进程删除，此时该进程处于僵死状态，status是调用进程终止时传递给其父s进程的值，若调用进程还有子进程，则将所有子进程的父进程改为1号进程。</p></li><li><p>信号量的函数都以sem_开头，线程中使用的基本信号量函数有4个，它们都声明在头文件semaphore.h中。</p><p>int sem_init(sem_t *sem,int pshared,unsigned int value);</p><p>该函数初始化由sem指向的信号对象，设置它的共享选项，并给它一个初始的整数值。<br>pshared控制信号量的类型，如果其值为0，就表示这个信号量是当前进程的局部信号量，否则信号量就可以在多个进程之间共享，value为sem的初始值。调用成功时返回0，失败返回-1.</p><p> int sem_init(sem_t *sem,int pshared,unsigned int value);</p><p>该函数用于以原子操作的方式将信号量的值减1。原子操作就是，如果两个线程企图同时给一个信号量加1或减1，它们之间不会互相干扰。等待信号量，如果信号量的值大于0，将信号量的值减1，立即返回。如果信号量的值为0，则线程阻塞。相当于P操作。成功返回0，失败返回-1。sem指向的对象是由sem_init调用初始化的信号量。</p><p>int sem_post(sem_t *sem); </p><p>该函数用于以原子操作的方式将信号量的值加1。释放信号量，让信号量的值加1。相当于V操作。与sem_wait一样，sem指向的对象是由sem_init调用初始化的信号量。调用成功时返回0，失败返回-1.</p><p> int sem_destroy(sem_t *sem);</p><p>该函数用于对用完的信号量的清理。该函数用于对用完的信号量的清理。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cqhttp机器人</title>
      <link href="/2023/02/12/cqhttp%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/2023/02/12/cqhttp%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  闲着无聊又碰上chatgpt大火，想尝试着搭建一个qq机器人玩玩</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/tagagi/article/details/121089116">(179条消息) 使用go-cqhttp搭建一个简易的QQ机器人（入门）_sanananana的博客-CSDN博客_go-cqhttp</a></p><p><a href="https://docs.nonebot.dev/guide/onebot.html">OneBot 事件和 API | NoneBot</a></p><h1 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h1><p>端口号没处理好，导致运行错误</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>string容器</title>
      <link href="/2022/11/07/string%E5%AE%B9%E5%99%A8/"/>
      <url>/2022/11/07/string%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="string容器"><a href="#string容器" class="headerlink" title="string容器"></a>string容器</h1><p>参考链接：<a href="https://www.bilibili.com/video/BV1et411b73Z?p=189">https://www.bilibili.com/video/BV1et411b73Z?p=189</a></p><p><a href="https://blog.csdn.net/beilizhang/article/details/118608565">(157条消息) C++入门——string容器_cqu_shuai的博客-CSDN博客_子串插入</a></p><h2 id="1-string基本概念"><a href="#1-string基本概念" class="headerlink" title="1.string基本概念"></a><code>1.string</code>基本概念</h2><p><strong>本质：</strong></p><p><strong>·</strong> string是c++风格的字符串，而string本质上是一个类</p><p><strong>string和char*区别：</strong></p><p><strong>·</strong> char*是一个指针</p><p><strong>·</strong> string是一个类，类内部封装了char，管理这个字符串，是一个char型的容器</p><p><strong>特点****：</strong></p><p>string类内部封装了很多成员方法</p><p>例如：查找find，拷贝copy，删除delete，代替replace，插入insert</p><p>string管理char*所分配的内存，不用担心赋值越界和取值越界等，由类内部进行负责。</p><h3 id="string构造函数"><a href="#string构造函数" class="headerlink" title="string构造函数"></a>string构造函数</h3><p>构造函数原型：</p><p>string(); &#x2F;&#x2F;创造一个空的字符串<br>string(const char*s) &#x2F;&#x2F;使用字符串s初始化<br>string(const string&amp; str); &#x2F;&#x2F;使用一个string对象初始化另一个string对象<br>string(int n, char c); &#x2F;&#x2F;使用n个字符c初始化</p><h3 id="string赋值操作"><a href="#string赋值操作" class="headerlink" title="string赋值操作"></a>string赋值操作</h3><p>赋值的函数原型：</p><p>string&amp; operator&#x3D;(const char* s); &#x2F;&#x2F;char*类型字符串赋值给当前的字符串<br>string&amp; operator&#x3D;(const string &amp;s); &#x2F;&#x2F;把字符串s赋给当前字符串<br>string&amp; operator&#x3D;(char c); &#x2F;&#x2F;字符赋值给当前的字符串<br>string&amp; assign(const char *s); &#x2F;&#x2F;把字符串s赋给当前字符串<br>string&amp; assign(const char *s, int n); &#x2F;&#x2F;把字符串s的前n个字符赋给当前字符串<br>string&amp; assign(const string &amp;s); &#x2F;&#x2F;把字符串s赋给当前字符串<br>string&amp; assign(int n, char c); &#x2F;&#x2F;用n个字符c赋给当前字符串</p><h3 id="string字符串拼接"><a href="#string字符串拼接" class="headerlink" title="string字符串拼接"></a>string字符串拼接</h3><p>string&amp; operator+&#x3D;(const char* str); &#x2F;&#x2F;重载+&#x3D;操作符<br>string&amp; operator+&#x3D;(const char c); &#x2F;&#x2F;重载+&#x3D;操作符<br>string&amp; operator+&#x3D;(const string&amp; str); &#x2F;&#x2F;重载+&#x3D;操作符<br>string&amp; append(const char *s); &#x2F;&#x2F;把字符串s连接到当前字符串结尾<br>string&amp; append(const char *s, int n); &#x2F;&#x2F;把字符串s的前n个字符连接到当前字符串结尾<br>string&amp; append(const string &amp;s); &#x2F;&#x2F;同operator+&#x3D;(const string&amp; str)<br>string&amp; append(const string &amp;s, int pos, int n); &#x2F;&#x2F;字符串s中从pos开始的n个字符连接到字符串结尾</p><h3 id="string查找"><a href="#string查找" class="headerlink" title="string查找"></a>string查找</h3><p>int find(const string&amp; str, int pos&#x3D;0) const; &#x2F;&#x2F;查找str第一次出现位置，从pos开始查找<br>int find(const char* s, int pos&#x3D;0) const; &#x2F;&#x2F;查找s第一次出现位置，从pos开始查找<br>int find(const char* s, int pos, int n) const; &#x2F;&#x2F;从pos位置查找s的前n个字符第一次位置<br>int find(const char c, int pos&#x3D;0) const; &#x2F;&#x2F;查找字符c第一次出现位置<br>int rfind(const string&amp; str, int pos&#x3D;npos) const; &#x2F;&#x2F;查找str最后一次位置，从pos开始查找<br>int rfind(const char* s, int pos&#x3D;npos) const; &#x2F;&#x2F;查找s最后一次出现位置，从pos开始查找<br>int rfind(const char* s, int pos, int n) const; &#x2F;&#x2F;从pos查找s的前n个字符最后一次位置<br>int rfind(const char* c, int pos&#x3D;0) const; &#x2F;&#x2F;查找字符c最后一次出现位置</p><h3 id="string替换"><a href="#string替换" class="headerlink" title="string替换"></a>string替换</h3><p>string&amp; replace(int pos, int n, const string&amp; str); &#x2F;&#x2F;替换从pos开始n个字符为字符串str<br>string&amp; replace(int pos, int n, const char* s); &#x2F;&#x2F;替换从pos开始的n个字符为字符串s</p><h3 id="string字符串比较"><a href="#string字符串比较" class="headerlink" title="string字符串比较"></a>string字符串比较</h3><p>字符串比较是按字符的ASCII码进行对比</p><p>&#x3D;返回 0<br>返回 1</p><p>&lt;返回 -1<br>函数原型：</p><p>int compare(const string &amp;s) const; &#x2F;&#x2F; 与字符串s比较<br>int compare(const char *s) const; &#x2F;&#x2F;与字符串s比较</p><h3 id="string字符存取"><a href="#string字符存取" class="headerlink" title="string字符存取"></a>string字符存取</h3><p>char&amp; operator[](int n); &#x2F;&#x2F;通过[]方式取字符<br>char&amp; at(int n); &#x2F;&#x2F;通过at方法获取字符</p><h3 id="string插入和删除"><a href="#string插入和删除" class="headerlink" title="string插入和删除"></a>string插入和删除</h3><p>string&amp; insert(int pos, const char* s); &#x2F;&#x2F;插入字符串<br>string&amp; insert(int pos, const string&amp; str); &#x2F;&#x2F;插入字符串<br>string&amp; insert(int pos, int n, char c); &#x2F;&#x2F;在指定位置插入n个字符c<br>string&amp; erase(int pos, int n&#x3D;npos); &#x2F;&#x2F;删除从pos开始的n个字符<br>string子串<br>string substr(int pos&#x3D;0, int n&#x3D;npos) const; &#x2F;&#x2F;返回由pos开始的n个字符组成的字符串</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vector容器</title>
      <link href="/2022/11/07/vector%E5%AE%B9%E5%99%A8/"/>
      <url>/2022/11/07/vector%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="/2022/11/07/STL/"/>
      <url>/2022/11/07/STL/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://zhuanlan.zhihu.com/p/158647883">基础篇：STL容器和算法 - 知乎 (zhihu.com)</a></p><h1 id="1-STL基本概念"><a href="#1-STL基本概念" class="headerlink" title="1.STL基本概念"></a>1.STL基本概念</h1><p>⚪STL(Standard Template Library,标准模板库)</p><p>⚪STL从广义上分为：容器(container)算法(algorithm)迭代器(iterator)</p><p>⚪容器和算法之间通过迭代器进行无缝衔接</p><p>⚪STL几乎所有的代码都采用了模板类或者函数模板</p><h1 id="2-STL六大组件"><a href="#2-STL六大组件" class="headerlink" title="2.STL六大组件"></a>2.STL六大组件</h1><p><strong>1.容器：</strong>各种数据结构，如vector,list,deque,set,map等，用来存放数据。</p><p><strong>2.算法：</strong>各种常用算法。如sort、find、copy、for_each等。</p><p><strong>3.迭代器</strong>：扮演了容器和算法之间的粘合剂</p><p><strong>4.仿函数：</strong>行为类似函数，可以作 为算法的某种策略。</p><p><strong>5.适配器：</strong>一种用来修饰容器或者仿函数或者迭代器接口的东西</p><p><strong>6.空间适配器：</strong>负责空间的配置与管理</p><h1 id="3-STL中容器、算法、迭代器"><a href="#3-STL中容器、算法、迭代器" class="headerlink" title="3.STL中容器、算法、迭代器"></a>3.STL中容器、算法、迭代器</h1><h6 id="STL容器就是将运用最广泛的一些数据结构实现出来。容器用来管理某类对象。常用的数据结构：数组-array-链表-list-tree-树-，栈-stack-队列-queue-集合-set-映射表-map-根据数据在容器中的排列特性，这些数据分为序列式容器和关联式容器两种。"><a href="#STL容器就是将运用最广泛的一些数据结构实现出来。容器用来管理某类对象。常用的数据结构：数组-array-链表-list-tree-树-，栈-stack-队列-queue-集合-set-映射表-map-根据数据在容器中的排列特性，这些数据分为序列式容器和关联式容器两种。" class="headerlink" title="STL容器就是将运用最广泛的一些数据结构实现出来。容器用来管理某类对象。常用的数据结构：数组(array) , 链表(list), tree(树)，栈(stack), 队列(queue), 集合(set),映射表(map), 根据数据在容器中的排列特性，这些数据分为序列式容器和关联式容器两种。"></a><strong>STL容器</strong>就是将运用最广泛的一些数据结构实现出来。容器用来管理某类对象。常用的数据结构：数组(array) , 链表(list), tree(树)，栈(stack), 队列(queue), 集合(set),映射表(map), 根据数据在容器中的排列特性，这些数据分为序列式容器和关联式容器两种。</h6><h2 id="1）-Sequence-containers"><a href="#1）-Sequence-containers" class="headerlink" title="1） Sequence containers"></a>1） Sequence containers</h2><p><strong>序列式容器（Sequence containers），其中每个元素均有固定位置—取决于插入时机和地点，和元素值无关。</strong>如果你以追加方式对一个群集插入六个元素，它们的排列次序将和插入次序一致。STL提供了三个序列式容器：向量（vector）、双端队列（deque）、列表（list），此外也可以把 string 和 array 当做一种序列式容器。</p><h2 id="2）Associative-containers"><a href="#2）Associative-containers" class="headerlink" title="2）Associative containers"></a>2）Associative containers</h2><p><strong>关联式容器（Associative containers），元素位置取决于特定的排序准则以及元素值，和插入次序无关。</strong>如果你将六个元素置入这样的群集中，它们的位置取决于元素值，和插入次序无关。STL提供了四个关联式容器：集合（set）、多重集合（multiset）、映射（map）和多重映射（multimap）。</p><h3 id="算法分为质变算法和非质变算法。"><a href="#算法分为质变算法和非质变算法。" class="headerlink" title="算法分为质变算法和非质变算法。"></a>算法分为质变算法和非质变算法。</h3><p>质变算法：是指运算过程中会更改区间内的元素内容，例如拷贝，替代，删除等等。</p><p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等。</p><h3 id="迭代器：容器和算法之间的粘合剂，使用类似指针"><a href="#迭代器：容器和算法之间的粘合剂，使用类似指针" class="headerlink" title="迭代器：容器和算法之间的粘合剂，使用类似指针"></a><strong>迭代器：容器和算法之间的粘合剂，使用类似指针</strong></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2022/09/25/%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/09/25/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="1-什么是链表"><a href="#1-什么是链表" class="headerlink" title="1.什么是链表"></a>1.什么是链表</h2><p>链表是结构体变量与结构变量连接的一起</p><h2 id="2-怎么动态创建链表"><a href="#2-怎么动态创建链表" class="headerlink" title="2.怎么动态创建链表"></a>2.怎么动态创建链表</h2><p>动态内存申请+模块化设计</p><h3 id="（1）创建链表（创建一个表头表示整个链表）"><a href="#（1）创建链表（创建一个表头表示整个链表）" class="headerlink" title="（1）创建链表（创建一个表头表示整个链表）"></a>（1）创建链表（创建一个表头表示整个链表）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">createList</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">headNode</span>=</span>(<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="comment">//headNode成为了结构体变量，变量使用前必须被初始化</span></span><br><span class="line">    <span class="comment">//headNode-&gt;data=1</span></span><br><span class="line">    headNode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）创建节点"><a href="#（2）创建节点" class="headerlink" title="（2）创建节点"></a>（2）创建节点</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">createNode</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>*<span class="title">newNode</span>=</span>(<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    newNode-&gt;data=data;</span><br><span class="line">    newNode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）插入节点"><a href="#（3）插入节点" class="headerlink" title="（3）插入节点"></a>（3）插入节点</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertNodeByHead</span><span class="params">(<span class="keyword">struct</span> Node* headNode,<span class="type">int</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">newNode</span>=</span>creatNode(data);</span><br><span class="line">    newNode-&gt;next=headNode-&gt;next;</span><br><span class="line">    headNode-&gt;next=newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）删除节点"><a href="#（4）删除节点" class="headerlink" title="（4）删除节点"></a>（4）删除节点</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">deleteNodeByAppoin</span><span class="params">(<span class="keyword">struct</span> Node* headNode,<span class="type">int</span> postData)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">posNode</span>=</span>headNode-&gt;next;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">posNodeFront</span>=</span>headNode;</span><br><span class="line">    <span class="keyword">if</span>(posNode==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法删除链表为空\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(posNode-&gt;data!=postData)</span><br><span class="line">        &#123;</span><br><span class="line">            posNodeFront=posNode;</span><br><span class="line">            posNode=posNodeFront-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(posNode==<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;没有找到相关信息，无法删除\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        posNodeFront-&gt;next=posNode-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(posNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（5）打印遍历链表（测试）"><a href="#（5）打印遍历链表（测试）" class="headerlink" title="（5）打印遍历链表（测试）"></a>（5）打印遍历链表（测试）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(<span class="keyword">struct</span> Node* headNode)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pMove</span>=</span>headNode-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(pMove)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,pMove-&gt;data);</span><br><span class="line">        pMove=pMove-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（6）主函数"><a href="#（6）主函数" class="headerlink" title="（6）主函数"></a>（6）主函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>*<span class="title">lst</span>=</span>createList();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码学</title>
      <link href="/2022/08/20/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
      <url>/2022/08/20/%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2022/08/01/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/08/01/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​首先部署upload-labs</p><h1 id="1-绕过js验证"><a href="#1-绕过js验证" class="headerlink" title="1.绕过js验证"></a>1.绕过js验证</h1><h2 id="（1）js验证代码分析"><a href="#（1）js验证代码分析" class="headerlink" title="（1）js验证代码分析"></a>（1）js验证代码分析</h2><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/1.png"></p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/2.png"></p><p>查看源码可知存在checkFile检测，剔除该检测即可上传shell文件</p><h2 id="（2）burp剔除响应js"><a href="#（2）burp剔除响应js" class="headerlink" title="（2）burp剔除响应js"></a>（2）burp剔除响应js</h2><p>在proxy中的options中勾选remove all Javascript，设置代理 </p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/3-16595313077354.png"></p><h2 id="（3）浏览器审计工具剔除js"><a href="#（3）浏览器审计工具剔除js" class="headerlink" title="（3）浏览器审计工具剔除js"></a>（3）浏览器审计工具剔除js</h2><p>好麻烦。。。。。。删除onsubmit，保存文件，添加action以及地址，使用浏览器打开</p><h2 id="（4）上传webshell，蚁剑连接"><a href="#（4）上传webshell，蚁剑连接" class="headerlink" title="（4）上传webshell，蚁剑连接"></a>（4）上传webshell，蚁剑连接</h2><p>一句话木马：<img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/4.png"></p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/5.png"></p><p>上传shell，复制图片链接，加入蚁剑连接即可。</p><h1 id="2-绕过MIME-Type验证"><a href="#2-绕过MIME-Type验证" class="headerlink" title="2.绕过MIME-Type验证"></a>2.绕过MIME-Type验证</h1><h2 id="（1）MIME-Type介绍"><a href="#（1）MIME-Type介绍" class="headerlink" title="（1）MIME-Type介绍"></a>（1）MIME-Type介绍</h2><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/6.png"></p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/7.png"></p><p>参考链接：<a href="https://www.runoob.com/http/mime-types.html">MIME 类型 | 菜鸟教程 (runoob.com)</a></p><h2 id="（2）验证MIME-Type代码分析"><a href="#（2）验证MIME-Type代码分析" class="headerlink" title="（2）验证MIME-Type代码分析"></a>（2）验证MIME-Type代码分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">is_upload = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$UPLOAD_ADDR</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$UPLOAD_ADDR</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$img_path</span> = <span class="variable">$UPLOAD_ADDR</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="variable">$UPLOAD_ADDR</span>.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>upload_file是在表单中定义的</p><h2 id="（3）bp绕过"><a href="#（3）bp绕过" class="headerlink" title="（3）bp绕过"></a>（3）bp绕过</h2><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/8-16606450389581.png"></p><p>修改content-type为image&#x2F;jpeg</p><p><img src="/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/9.png"></p><h2 id="（4）蚁剑连接-虚拟终端"><a href="#（4）蚁剑连接-虚拟终端" class="headerlink" title="（4）蚁剑连接  虚拟终端"></a>（4）蚁剑连接  虚拟终端</h2><p>复制图片地址，在蚁剑连接</p><h1 id="3-绕过黑名单验证"><a href="#3-绕过黑名单验证" class="headerlink" title="3.绕过黑名单验证"></a>3.绕过黑名单验证</h1><h2 id="（1）基于文件名后缀验证介绍"><a href="#（1）基于文件名后缀验证介绍" class="headerlink" title="（1）基于文件名后缀验证介绍"></a>（1）基于文件名后缀验证介绍</h2><p>​       对于文件上传模块来说，尽量避免上传可执行的脚本文件。为了防止上传脚本需要设置对应的验证方式。最简单的就是设置文件后缀名验证。</p><h5 id="基于文件后缀名验证方式的分类："><a href="#基于文件后缀名验证方式的分类：" class="headerlink" title="基于文件后缀名验证方式的分类："></a>基于文件后缀名验证方式的分类：</h5><p>1.基于白名单验证：只针对白名单中有的后缀名，文件才能上传成功。</p><p>2.基于黑名单验证：只针对黑名单中没有的后缀名，文件才能上传成功。</p><h2 id="（2）基于黑名单验证代码分析"><a href="#（2）基于黑名单验证代码分析" class="headerlink" title="（2）基于黑名单验证代码分析"></a>（2）基于黑名单验证代码分析</h2><p>可以通过寻找漏网之鱼绕过黑名单，寻找某些可以被作为执行脚本同时也不在黑名单中。</p><p>查看源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$UPLOAD_ADDR</span>)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$UPLOAD_ADDR</span>. <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">                 <span class="variable">$img_path</span> = <span class="variable">$UPLOAD_ADDR</span> .<span class="string">&#x27;/&#x27;</span>. <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">                 <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="variable">$UPLOAD_ADDR</span> . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现’.asp’,’.aspx’,’.php’,’.jsp’这四种后缀名的文件无法上传</p><h2 id="（3）bp绕过黑名单验证"><a href="#（3）bp绕过黑名单验证" class="headerlink" title="（3）bp绕过黑名单验证"></a>（3）bp绕过黑名单验证</h2><p>利用bp截断http请求，利用intruder模块进行枚举后缀名，寻找黑名单中没有过滤的后缀名。</p><p>首先bp拦截，发送到intruder,打开positions。</p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/11.png"></p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/12.png"></p><p>选中php后缀，在payload，load中添加入准备好的字典，开始攻击</p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/13.png"></p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/14.png"></p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/15.png"></p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/16.png"></p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/17.png"></p><p>发现php后缀绕过失败的长度是5005，而有一些其他后缀为4995。</p><h2 id="（4）上传蚁剑连接"><a href="#（4）上传蚁剑连接" class="headerlink" title="（4）上传蚁剑连接"></a>（4）上传蚁剑连接</h2><p>复制与5005长度不同的地址，打开浏览器搜索，复制图片地址，上传蚁剑，修改图片后缀为php，连接即可。</p><h1 id="4-绕过黑名单验证（-htaccess）"><a href="#4-绕过黑名单验证（-htaccess）" class="headerlink" title="4.绕过黑名单验证（.htaccess）"></a>4.绕过黑名单验证（.htaccess）</h1><h2 id="（1）-htaccess文件介绍"><a href="#（1）-htaccess文件介绍" class="headerlink" title="（1）.htaccess文件介绍"></a>（1）.htaccess文件介绍</h2><p>概述来说，htaccess文件是<a href="https://baike.baidu.com/item/Apache">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页<a href="https://baike.baidu.com/item/301%E9%87%8D%E5%AE%9A%E5%90%91">301重定向</a>、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p>其中.htaccess文件内容：</p><p>SetHandler application&#x2F;x-httpd-php</p><p>设置当前目录所有文件都是用PHP解析，那么无论上传任何文件，只要文件内容符合PHP语言代码规范，就会被当做PHP执行。不符合则报错。</p><h2 id="（2）配置文件http-conf"><a href="#（2）配置文件http-conf" class="headerlink" title="（2）配置文件http.conf"></a>（2）配置文件http.conf</h2><p>打开apache配置文件，搜索AllowOverride，改none为all</p><h2 id="（3）审计黑名单过滤代码"><a href="#（3）审计黑名单过滤代码" class="headerlink" title="（3）审计黑名单过滤代码"></a>（3）审计黑名单过滤代码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$UPLOAD_ADDR</span>)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$UPLOAD_ADDR</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$img_path</span> = <span class="variable">$UPLOAD_ADDR</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="variable">$UPLOAD_ADDR</span> . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在黑名单中，没有对.htaccess进行过滤，可直接上传.htaccess来设置使用php解析任意文件。</p><p>文件内容：SetHandler application&#x2F;x-httpd-php</p><h2 id="（4）制作图片phpinfo探针并上传"><a href="#（4）制作图片phpinfo探针并上传" class="headerlink" title="（4）制作图片phpinfo探针并上传"></a>（4）制作图片phpinfo探针并上传</h2><p>创建文本，加入内容</p><p>SetHandler application&#x2F;x-httpd-php</p><p>保存为：.htaccess</p><p>上传</p><p>创建文本，加入内容</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>修改格式为jpg，保存。上传即可。</p><h1 id="5-绕过黑名单验证（大小写绕过）"><a href="#5-绕过黑名单验证（大小写绕过）" class="headerlink" title="5.绕过黑名单验证（大小写绕过）"></a>5.绕过黑名单验证（大小写绕过）</h1><h2 id="（1）大小写绕过原理"><a href="#（1）大小写绕过原理" class="headerlink" title="（1）大小写绕过原理"></a>（1）大小写绕过原理</h2><p>window系统下，对于文件名中的大小写不敏感，例如：tEST.php和TESTt.php是一样的。</p><p> Linux系统下，对于文件名中的大小写敏感，例如：test.php和tesT.php</p><p>是不一样的。</p><p>大小写绕过只适用于windows系统。</p><h2 id="（2）基于黑名单验证的代码分析"><a href="#（2）基于黑名单验证的代码分析" class="headerlink" title="（2）基于黑名单验证的代码分析"></a>（2）基于黑名单验证的代码分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$UPLOAD_ADDR</span>)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$UPLOAD_ADDR</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$img_path</span> = <span class="variable">$UPLOAD_ADDR</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="variable">$UPLOAD_ADDR</span> . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（3）直接修改后缀名PhP上传文件"><a href="#（3）直接修改后缀名PhP上传文件" class="headerlink" title="（3）直接修改后缀名PhP上传文件"></a>（3）直接修改后缀名PhP上传文件</h2><h2 id="（4）WeBaCoo上传webshell"><a href="#（4）WeBaCoo上传webshell" class="headerlink" title="（4）WeBaCoo上传webshell"></a>（4）WeBaCoo上传webshell</h2><h1 id="6-绕过黑名单验证（空格绕过）"><a href="#6-绕过黑名单验证（空格绕过）" class="headerlink" title="6.绕过黑名单验证（空格绕过）"></a>6.绕过黑名单验证（空格绕过）</h1><h2 id="（1）空格绕过原理"><a href="#（1）空格绕过原理" class="headerlink" title="（1）空格绕过原理"></a>（1）空格绕过原理</h2><p>Windows系统下，对于文件名中的空格会被作为空处理，程序中的检测代码却不能自动删除空格。从而绕过黑名单。</p><p>针对这样的情况需要使用bp截断HTTP请求后，修改对应的文件名，添加空格。</p><h2 id="（2）基于黑名单验证代码分析-1"><a href="#（2）基于黑名单验证代码分析-1" class="headerlink" title="（2）基于黑名单验证代码分析"></a>（2）基于黑名单验证代码分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$UPLOAD_ADDR</span>)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$UPLOAD_ADDR</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$img_path</span> = <span class="variable">$UPLOAD_ADDR</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="variable">$UPLOAD_ADDR</span> . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码中没有对上传文件的文件名做去空格处理。存在添加空格绕过黑名单问题。</p><h2 id="（3）bp绕过黑名单验证-1"><a href="#（3）bp绕过黑名单验证-1" class="headerlink" title="（3）bp绕过黑名单验证"></a>（3）bp绕过黑名单验证</h2><p>使用bp截断HTTP请求后，修改对应的文件名，添加空格。</p><h2 id="（4）蚁剑连接"><a href="#（4）蚁剑连接" class="headerlink" title="（4）蚁剑连接"></a>（4）蚁剑连接</h2>]]></content>
      
      
      
        <tags>
            
            <tag> -ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序实战</title>
      <link href="/2022/07/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/"/>
      <url>/2022/07/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="云开发基础"><a href="#云开发基础" class="headerlink" title="云开发基础"></a>云开发基础</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询数据</span></span><br><span class="line"> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">     db.<span class="title function_">collection</span>(<span class="string">&quot;demolist&quot;</span>).<span class="title function_">get</span>(&#123;</span><br><span class="line">       <span class="attr">success</span>:<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">           <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">               <span class="attr">dataObj</span>:res.<span class="property">data</span></span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"> <span class="title function_">addData</span>(<span class="params"></span>)&#123;</span><br><span class="line">   wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">       <span class="attr">title</span>:<span class="string">&#x27;数据加载中&#x27;</span>,</span><br><span class="line">       <span class="attr">mask</span>:<span class="literal">true</span></span><br><span class="line">   &#125;)</span><br><span class="line">   db.<span class="title function_">collection</span>(<span class="string">&quot;demolist&quot;</span>).<span class="title function_">add</span>(&#123;</span><br><span class="line">       <span class="attr">data</span>:&#123;</span><br><span class="line">           <span class="attr">title</span>:<span class="string">&quot;测试1&quot;</span>,</span><br><span class="line">           <span class="attr">author</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">           <span class="attr">content</span>:<span class="string">&quot;阿巴阿巴阿巴阿巴阿巴阿巴&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">       wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="comment">//提交表单添加进数据库</span></span><br><span class="line">   <span class="title function_">btnSub</span>(<span class="params">res</span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> &#123;title,author,content&#125;=res.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">       db.<span class="title function_">collection</span>(<span class="string">&quot;demolist&quot;</span>).<span class="title function_">add</span>(&#123;</span><br><span class="line">           <span class="attr">data</span>:&#123;</span><br><span class="line">               <span class="attr">title</span>:title,</span><br><span class="line">               <span class="attr">author</span>:author,</span><br><span class="line">               <span class="attr">content</span>:content</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;, </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -云开发 -微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序</title>
      <link href="/2022/07/06/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/07/06/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="十大排序"><a href="#十大排序" class="headerlink" title="十大排序"></a>十大排序</h1><p><strong>交换变量的方式可采用异或（^）（前提是两变量的指向不是同一块地址空间）</strong></p><p><strong>原理：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a=甲; int b=乙;</span><br><span class="line"></span><br><span class="line">a=a^b;  //a=a^b=甲^乙;</span><br><span class="line"></span><br><span class="line">b=a^b;  //b=a^b=甲^乙^乙=甲;</span><br><span class="line"></span><br><span class="line">a=a^b;  //a=a^b=甲^乙^甲=乙;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>应用：挑选出一堆数中出现奇数次的一种或两种数</strong></p><p><strong>实现原理：将数全部进行异或，出现偶数次的数进行异或得到0，剩下的便是出现奇数次的数，若是有两个出现奇数次的数，则找出两数的异或值为1的那一位，再分离出再那一位为1的数，最后分离出来的数再异或上原始两数的异或值即可.</strong></p><p><strong>各排列的复杂度：</strong></p><img src="https://img2.baidu.com/it/u=1870561432,1509466024&fm=253&fmt=auto&app=138&f=PNG?w=740&h=500" alt="点击查看图片来源" style="zoom:80%;" /><h2 id="（1）选择排序"><a href="#（1）选择排序" class="headerlink" title="（1）选择排序"></a>（1）选择排序</h2><h4 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h4><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的<a href="https://so.csdn.net/so/search?q=%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&spm=1001.2101.3001.7020">时间复杂度</a>。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><h4 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。<br>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br>重复第二步，直到所有元素均排序完毕。</p><h4 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h4><img src="D:/blog/source/_posts/十大排序/冒泡排序.gif" style="zoom: 100%" /><h4 id="c代码实现"><a href="#c代码实现" class="headerlink" title="c代码实现"></a>c代码实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">select_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> len)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len; i++) </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;len; j++) </span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;a[i]) swap(a[j],a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">select_sort(a,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python代码实现"><a href="#python代码实现" class="headerlink" title="python代码实现"></a>python代码实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SelectSort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)-<span class="number">1</span>):</span><br><span class="line">        min_val, pos = arr[i], i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; min_val:</span><br><span class="line">                min_val, pos = arr[j], j</span><br><span class="line">        arr[i], arr[pos] = arr[pos], arr[i]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="（2）冒泡排序"><a href="#（2）冒泡排序" class="headerlink" title="（2）冒泡排序"></a>（2）冒泡排序</h2><h4 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h4><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端。</p><p>作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。</p><h4 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>1.比较相邻的元素。如果第一个元素比第二个元素大，就交换他们两个。<br>2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。<br>3.针对所有的元素重复以上的步骤，除了最后一个。<br>4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><blockquote><p>注：原始的冒泡是从后往前的</p></blockquote><h4 id="动图演示-1"><a href="#动图演示-1" class="headerlink" title="动图演示"></a>动图演示</h4><img src="十大排序/冒泡排序.gif" style="zoom: 100%" /><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="冒泡排序"></h4><h4 id="c代码实现-1"><a href="#c代码实现-1" class="headerlink" title="c代码实现"></a>c代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="comment">//整数或浮点数皆可使用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(T a[],<span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;len<span class="number">-1</span>-i; j++)</span><br><span class="line">        <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>]) <span class="built_in">swap</span>(a[j],a[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">bubble_sort</span>(a,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python代码实现-1"><a href="#python代码实现-1" class="headerlink" title="python代码实现"></a>python代码实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Bubble_Sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)-<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 如果某一趟排序并没有发生交换,那么可以认为数组有序,终止排序即可。</span></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="literal">False</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>怎么在hexo上发文章</title>
      <link href="/2022/06/27/%E6%80%8E%E4%B9%88%E5%9C%A8hexo%E4%B8%8A%E5%8F%91%E6%96%87%E7%AB%A0/"/>
      <url>/2022/06/27/%E6%80%8E%E4%B9%88%E5%9C%A8hexo%E4%B8%8A%E5%8F%91%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>   历经千辛万苦，终于配置好了主要东西，虽然还没有很完善，但总算可以用了</p><h1 id="1-教程"><a href="#1-教程" class="headerlink" title="1.教程"></a>1.教程</h1><p><a href="https://www.typora.net/1135.html">史上最完美的 Typora 教程 | typora中文网</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -博客 -hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么在hexo上发文章</title>
      <link href="/2022/06/27/%E5%B0%8F%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/"/>
      <url>/2022/06/27/%E5%B0%8F%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-C-输出精度控制"><a href="#1-C-输出精度控制" class="headerlink" title="1.C++输出精度控制"></a>1.C++输出精度控制</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> f = <span class="number">3.1415926535</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Enter the huashi temperature:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//-----------------方法一-------------------</span></span><br><span class="line"><span class="comment">/*cout.precision(3);//调用cout的precision()函数设置或返回当前要被显示的浮点变量的位数（即浮点数的数字个数）</span></span><br><span class="line"><span class="comment">cout &lt;&lt; fixed;//fixed输出小数点后面三位有效数字</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;The Celsius temperature is: &quot;;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; f &lt;&lt; endl;//输出小数点前后共三位有效数字</span></span><br><span class="line"><span class="comment">cout &lt;&lt; f &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//----------------方法二--------------------</span></span><br><span class="line"><span class="comment">//使用setprecision()操作符，包含在在iomanip头文件中</span></span><br><span class="line">cout &lt;&lt; f &lt;&lt; endl;<span class="comment">//默认输出六位</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">3</span>);<span class="comment">//单用setprecision是设置显示的有效数字位数。</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">0</span>) &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">1</span>) &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">3</span>) &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">4</span>) &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt;<span class="built_in">setiosflags</span>(ios::fixed);<span class="comment">//配合setprecision就是设置小数精度(小数点后的有效位数)</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; fixed;//作为cout的一个参数是setiosflags(ios::fixed)的简写形式，等效于上一行</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">0</span>) &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">1</span>) &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">3</span>) &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">4</span>) &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-字符、整数相加减"><a href="#2-字符、整数相加减" class="headerlink" title="2.字符、整数相加减"></a>2.字符、整数相加减</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;                  <span class="comment">//其实就是对ASCii表的操作</span></span><br><span class="line">string s;</span><br><span class="line"><span class="type">char</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">auto</span>  a_0 = a - <span class="string">&#x27;0&#x27;</span>;     <span class="comment">//字符转成数字 ，输出 数字b=49 ，字符 - 字符 = 整型数字  其实是ASCII值在相减 97- 48 = 49 </span></span><br><span class="line">cout &lt;&lt; a_0 &lt;&lt; endl;<span class="comment">//数字 49 </span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> zero = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0的ASCII值:&quot;</span>  &lt;&lt; (<span class="type">int</span>)zero &lt;&lt;endl; <span class="comment">//数字 48 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  a_ASCII = (<span class="type">int</span>)a;      <span class="comment">//就是ASC码十进制值,不加（int）也会隐式转 字符-》ASCII </span></span><br><span class="line">cout &lt;&lt; a_ASCII &lt;&lt; endl;   <span class="comment">//整型 97</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> b_ch = a_0+<span class="string">&#x27;0&#x27;</span>;      <span class="comment">//数字转成字符 , b=49 ,整型数字 + 字符 = 字符 </span></span><br><span class="line">    cout &lt;&lt; b_ch &lt;&lt; endl; <span class="comment">// 字符 a </span></span><br><span class="line">    </span><br><span class="line"><span class="type">char</span> A = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">char</span> lower = A + <span class="number">32</span>;   <span class="comment">//转小写</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;lower:&quot;</span> &lt;&lt; lower &lt;&lt;endl;  <span class="comment">//a</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> uper = a - <span class="number">32</span>;   <span class="comment">//转大写</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;uper:&quot;</span> &lt;&lt; uper &lt;&lt;endl; <span class="comment">//A</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-输出不同进制的数"><a href="#3-输出不同进制的数" class="headerlink" title="3.输出不同进制的数"></a>3.输出不同进制的数</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout&lt;&lt;hex&lt;&lt;i&lt;&lt;endl; <span class="comment">//输出十六进制数</span></span><br><span class="line">cout&lt;&lt;oct&lt;&lt;i&lt;&lt;endl; <span class="comment">//输出八进制数</span></span><br><span class="line">cout&lt;&lt;dec&lt;&lt;i&lt;&lt;endl; <span class="comment">//输出十进制数</span></span><br><span class="line"><span class="comment">// 输出16进制， setbase（int）可以设置8等。</span></span><br><span class="line"> cout &lt;&lt; <span class="built_in">setbase</span>(<span class="number">16</span>) &lt;&lt; i &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h1 id="4-queue的用法"><a href="#4-queue的用法" class="headerlink" title="4.queue的用法"></a>4.queue的用法</h1><p>1.包含的头文件为<queue></p><p>2.使用方法为：queue <T> q1;<br>T可以是标准类型比如double、int，也可以是自定义的类。</p><p>3.在项目和工程中，可能并没有把该队列定义在main函数里，导致可能会出现一个令人疑惑的小问题：那就是尽管包含了该头文件，仍然会提示未定义queue标识符。</p><p>解决方案为：在该文件里增加：using namespace std;</p><p>4.queue的自带函数：</p><p>queue 的基本操作<br>入队，如例：q.push(x); 将x 接到队列的末端。<br>出队，如例：q.pop(); 弹出队列的第一个元素，注意，并不会返回被弹出元素的值。<br>而且并没有q.pop(x)的用法;没有x&#x3D;q.pop()的用法,没 有*x&#x3D;q.pop()的用法。<br>访问队首元素，如例：x&#x3D;q.front()，即返回队头的元素。<br>访问队尾元素，如例：x&#x3D;q.back()，即返回队尾的元素。<br>判断队列空，如例：isempty&#x3D;q.empty()，当队列空时，返回true。<br>访问队列中的元素个数，如例：x&#x3D;q.size()</p><h1 id="5-C-x2F-C-读取文件出现乱码解决方法-输出到文件出现乱码"><a href="#5-C-x2F-C-读取文件出现乱码解决方法-输出到文件出现乱码" class="headerlink" title="5.C &#x2F; C++ 读取文件出现乱码解决方法 | 输出到文件出现乱码"></a>5.C &#x2F; C++ 读取文件出现乱码解决方法 | 输出到文件出现乱码</h1><p><a href="https://blog.csdn.net/qq_36667170/article/details/79620611">(164条消息) C &#x2F; C++ 读取文件出现乱码解决方法 | 输出到文件出现乱码_LolitaAnn的博客-CSDN博客_c++乱码怎么解决</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/26/hello-world/"/>
      <url>/2022/06/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
