<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件上传</title>
      <link href="/2022/08/01/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/08/01/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​首先部署upload-labs</p><h1 id="1-绕过js验证"><a href="#1-绕过js验证" class="headerlink" title="1.绕过js验证"></a>1.绕过js验证</h1><h2 id="（1）js验证代码分析"><a href="#（1）js验证代码分析" class="headerlink" title="（1）js验证代码分析"></a>（1）js验证代码分析</h2><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/1.png"></p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/2.png"></p><p>查看源码可知存在checkFile检测，剔除该检测即可上传shell文件</p><h2 id="（2）burp剔除响应js"><a href="#（2）burp剔除响应js" class="headerlink" title="（2）burp剔除响应js"></a>（2）burp剔除响应js</h2><p>在proxy中的options中勾选remove all Javascript，设置代理 </p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/3-16595313077354.png"></p><h2 id="（3）浏览器审计工具剔除js"><a href="#（3）浏览器审计工具剔除js" class="headerlink" title="（3）浏览器审计工具剔除js"></a>（3）浏览器审计工具剔除js</h2><p>好麻烦。。。。。。删除onsubmit，保存文件，添加action以及地址，使用浏览器打开</p><h2 id="（4）上传webshell，蚁剑连接"><a href="#（4）上传webshell，蚁剑连接" class="headerlink" title="（4）上传webshell，蚁剑连接"></a>（4）上传webshell，蚁剑连接</h2><p>一句话木马：<img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/4.png"></p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/5.png"></p><p>上传shell，复制图片链接，加入蚁剑连接即可。</p><h1 id="2-绕过MIME-Type验证"><a href="#2-绕过MIME-Type验证" class="headerlink" title="2.绕过MIME-Type验证"></a>2.绕过MIME-Type验证</h1><h2 id="（1）MIME-Type介绍"><a href="#（1）MIME-Type介绍" class="headerlink" title="（1）MIME-Type介绍"></a>（1）MIME-Type介绍</h2><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/6.png"></p><p><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/7.png"></p><p>参考链接：<a href="https://www.runoob.com/http/mime-types.html">MIME 类型 | 菜鸟教程 (runoob.com)</a></p><h2 id="（2）验证MIME-Type代码分析"><a href="#（2）验证MIME-Type代码分析" class="headerlink" title="（2）验证MIME-Type代码分析"></a>（2）验证MIME-Type代码分析</h2><h2 id="（3）bp绕过"><a href="#（3）bp绕过" class="headerlink" title="（3）bp绕过"></a>（3）bp绕过</h2><h2 id="（4）蚁剑连接"><a href="#（4）蚁剑连接" class="headerlink" title="（4）蚁剑连接"></a>（4）蚁剑连接</h2>]]></content>
      
      
      
        <tags>
            
            <tag> -ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序实战</title>
      <link href="/2022/07/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/"/>
      <url>/2022/07/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="云开发基础"><a href="#云开发基础" class="headerlink" title="云开发基础"></a>云开发基础</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询数据</span></span><br><span class="line"> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">     db.<span class="title function_">collection</span>(<span class="string">&quot;demolist&quot;</span>).<span class="title function_">get</span>(&#123;</span><br><span class="line">       <span class="attr">success</span>:<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">           <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">               <span class="attr">dataObj</span>:res.<span class="property">data</span></span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"> <span class="title function_">addData</span>(<span class="params"></span>)&#123;</span><br><span class="line">   wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">       <span class="attr">title</span>:<span class="string">&#x27;数据加载中&#x27;</span>,</span><br><span class="line">       <span class="attr">mask</span>:<span class="literal">true</span></span><br><span class="line">   &#125;)</span><br><span class="line">   db.<span class="title function_">collection</span>(<span class="string">&quot;demolist&quot;</span>).<span class="title function_">add</span>(&#123;</span><br><span class="line">       <span class="attr">data</span>:&#123;</span><br><span class="line">           <span class="attr">title</span>:<span class="string">&quot;测试1&quot;</span>,</span><br><span class="line">           <span class="attr">author</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">           <span class="attr">content</span>:<span class="string">&quot;阿巴阿巴阿巴阿巴阿巴阿巴&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">       wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="comment">//提交表单添加进数据库</span></span><br><span class="line">   <span class="title function_">btnSub</span>(<span class="params">res</span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> &#123;title,author,content&#125;=res.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">       db.<span class="title function_">collection</span>(<span class="string">&quot;demolist&quot;</span>).<span class="title function_">add</span>(&#123;</span><br><span class="line">           <span class="attr">data</span>:&#123;</span><br><span class="line">               <span class="attr">title</span>:title,</span><br><span class="line">               <span class="attr">author</span>:author,</span><br><span class="line">               <span class="attr">content</span>:content</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;, </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -云开发 -微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序</title>
      <link href="/2022/07/06/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/07/06/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="十大排序"><a href="#十大排序" class="headerlink" title="十大排序"></a>十大排序</h1><p><strong>交换变量的方式可采用异或（^）（前提是两变量的指向不是同一块地址空间）</strong></p><p><strong>原理：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a=甲; int b=乙;</span><br><span class="line"></span><br><span class="line">a=a^b;  //a=a^b=甲^乙;</span><br><span class="line"></span><br><span class="line">b=a^b;  //b=a^b=甲^乙^乙=甲;</span><br><span class="line"></span><br><span class="line">a=a^b;  //a=a^b=甲^乙^甲=乙;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>应用：挑选出一堆数中出现奇数次的一种或两种数</strong></p><p><strong>实现原理：将数全部进行异或，出现偶数次的数进行异或得到0，剩下的便是出现奇数次的数，若是有两个出现奇数次的数，则找出两数的异或值为1的那一位，再分离出再那一位为1的数，最后分离出来的数再异或上原始两数的异或值即可.</strong></p><p><strong>各排列的复杂度：</strong></p><img src="https://img2.baidu.com/it/u=1870561432,1509466024&fm=253&fmt=auto&app=138&f=PNG?w=740&h=500" alt="点击查看图片来源" style="zoom:80%;" /><h2 id="（1）选择排序"><a href="#（1）选择排序" class="headerlink" title="（1）选择排序"></a>（1）选择排序</h2><h4 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h4><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的<a href="https://so.csdn.net/so/search?q=%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&spm=1001.2101.3001.7020">时间复杂度</a>。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><h4 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。<br>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br>重复第二步，直到所有元素均排序完毕。</p><h4 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h4><img src="D:/blog/source/_posts/十大排序/冒泡排序.gif" style="zoom: 100%" /><h4 id="c代码实现"><a href="#c代码实现" class="headerlink" title="c代码实现"></a>c代码实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">select_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> len)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len; i++) </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;len; j++) </span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;a[i]) swap(a[j],a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">select_sort(a,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python代码实现"><a href="#python代码实现" class="headerlink" title="python代码实现"></a>python代码实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SelectSort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)-<span class="number">1</span>):</span><br><span class="line">        min_val, pos = arr[i], i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; min_val:</span><br><span class="line">                min_val, pos = arr[j], j</span><br><span class="line">        arr[i], arr[pos] = arr[pos], arr[i]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="（2）冒泡排序"><a href="#（2）冒泡排序" class="headerlink" title="（2）冒泡排序"></a>（2）冒泡排序</h2><h4 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h4><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端。</p><p>作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。</p><h4 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>1.比较相邻的元素。如果第一个元素比第二个元素大，就交换他们两个。<br>2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。<br>3.针对所有的元素重复以上的步骤，除了最后一个。<br>4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><blockquote><p>注：原始的冒泡是从后往前的</p></blockquote><h4 id="动图演示-1"><a href="#动图演示-1" class="headerlink" title="动图演示"></a>动图演示</h4><img src="十大排序/冒泡排序.gif" style="zoom: 100%" /><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="冒泡排序"></h4><h4 id="c代码实现-1"><a href="#c代码实现-1" class="headerlink" title="c代码实现"></a>c代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="comment">//整数或浮点数皆可使用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(T a[],<span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;len<span class="number">-1</span>-i; j++)</span><br><span class="line">        <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>]) <span class="built_in">swap</span>(a[j],a[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">bubble_sort</span>(a,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python代码实现-1"><a href="#python代码实现-1" class="headerlink" title="python代码实现"></a>python代码实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Bubble_Sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)-<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 如果某一趟排序并没有发生交换,那么可以认为数组有序,终止排序即可。</span></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="literal">False</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>怎么在hexo上发文章</title>
      <link href="/2022/06/27/%E6%80%8E%E4%B9%88%E5%9C%A8hexo%E4%B8%8A%E5%8F%91%E6%96%87%E7%AB%A0/"/>
      <url>/2022/06/27/%E6%80%8E%E4%B9%88%E5%9C%A8hexo%E4%B8%8A%E5%8F%91%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>   历经千辛万苦，终于配置好了主要东西，虽然还没有很完善，但总算可以用了</p><h1 id="1-教程"><a href="#1-教程" class="headerlink" title="1.教程"></a>1.教程</h1><p><a href="https://www.typora.net/1135.html">史上最完美的 Typora 教程 | typora中文网</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -博客 -hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/26/hello-world/"/>
      <url>/2022/06/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
